from __future__ import annotations
from qif_converter.qif.qif_code import QifCode

def Date() -> QifCode: return QifCode("D", "Date. Leading zeroes on month and day can be skipped. Year can be either 4 digits or 2 digits or '6 (=2006).", "All", "D25 December 2006")
def AmountTransaction1() -> QifCode: return QifCode("U", "Seems identical to T field (amount of item.) Both T and U are present in QIF files exported from Quicken 2015.", "All", "U-1,234.50")
def AmountTransaction2() -> QifCode: return QifCode("T", "Amount of the item. For payments, a leading minus sign is required. For deposits, either no sign or a leading plus sign is accepted. Do not include currency symbols ($, £, ¥, etc.). Comma separators between thousands are allowed. For investment transactions, this amount is always a positive number, even for Buy and CvrShrt transactions.", "All", "T-1,234.50")
def Memo() -> QifCode: return QifCode("M", "Memo—any text you want to record about the item.", "All", "Mgasoline for my car")
def ClearedStatus() -> QifCode: return QifCode("C", "Cleared status. Values are blank (unreconciled/not cleared), * or c (cleared) and X or R (reconciled).", "All", "CR")
def CheckNumber() -> QifCode: return QifCode("N", "Number of the check. Can also be Deposit, Transfer, Print, ATM, EFT.", "Banking, Splits", "N1001")
def Payee() -> QifCode: return QifCode("P", "Payee. Or a description for deposits, transfers, etc.", "Banking, Investment", "PStandard Oil, Inc.")
def Address() -> QifCode: return QifCode("A", "Address of Payee. Up to 5 address lines are allowed. A 6th address line is a message that prints on the check. 1st line is normally the same as the Payee line—the name of the Payee.", "Banking, Splits", "A101 Main St.")
def Category() -> QifCode: return QifCode("L", "Category or Transfer and (optionally) Class. The literal values are those defined in the Quicken Category list. SubCategories can be indicated by a colon (:) followed by the subcategory literal. If the Quicken file uses Classes, this can be indicated by a slash (/) followed by the class literal. For Investments, MiscIncX or MiscExpX actions, Category/class or transfer/class. (40 characters maximum)", "Banking, Splits", "LFuel:car")
def FlagReimbursable() -> QifCode: return QifCode("F", "Flag this transaction as a reimbursable business expense.", "Banking", "F???")
def CategorySplit() -> QifCode: return QifCode("S", "Split category. Same format as L (Categorization) field. (40 characters maximum)", "Splits", "Sgas from Esso")
def MemoSplit() -> QifCode: return QifCode("E", "Split memo—any text to go with this split item.", "Splits", "Ework trips")
def AmountSplit() -> QifCode: return QifCode("$", "Amount for this split of the item. Same format as T field.", "Splits", "$1,000.50 ")
#def PercentSplit() -> QifCode: return QifCode("%", "Percent. Optional—used if splits are done by percentage.", "Splits", "50%") #This seems odd because it is not a leading code based on the example
def InvestmentAction() -> QifCode: return QifCode("N", "Investment Action (Buy, Sell, etc.).", "Investment", "NBuy")
def NameSecurity() -> QifCode: return QifCode("Y", "Security name.", "Investment", "YIDS Federal Income")
def PriceInvestment() -> QifCode: return QifCode("I", "Price.", "Investment", "I5.125")
def QuantityShares() -> QifCode: return QifCode("Q", "Quantity of shares (or split ratio, if Action is StkSplit). For investment transactions, this amount is always a positive number, even for Sell and ShtSell transactions.", "Investment", "Q4,896.201")
def CommissionCost() -> QifCode: return QifCode("O", "Commission cost (generally found in stock trades)", "Investment", "O14.95")
def AmountTransfered() -> QifCode: return QifCode("$", "Amount transferred, if cash is moved between accounts", "Investment", "$25,000.00 ")
def BudgetedAmount() -> QifCode: return QifCode("B", "Budgeted amount - may be repeated many times for monthly budgets.", "Categories", "B85.00")
def X() -> QifCode: return QifCode("X", "Extended data for Quicken Business. Followed by a second character subcode (see below) followed by content data.", "Invoices", "XI3")
def XIvoiceShipToAddress() -> QifCode: return QifCode("XA", "Ship-to address", "Invoices", "XAATTN: Receiving")
def XInvoiceType() -> QifCode: return QifCode("XI", "Invoice transaction type: 1 for invoice, 3 for payment", "Invoices", "XI1")
def XInvoiceDueDate() -> QifCode: return QifCode("XE", "Invoice due date", "Invoices", "XE6/17' 2")
def XInvoiceTaxAccount() -> QifCode: return QifCode("XC", "Tax account", "Invoices", "XC[*Sales Tax*]")
def XInvoiceTaxRate() -> QifCode: return QifCode("XR", "Tax rate", "Invoices", "XR7.70")
def XInvoiceTaxAmount() -> QifCode: return QifCode("XT", "Tax amount", "Invoices", "XT15.40")
def XInvoiceItemDescription() -> QifCode: return QifCode("XS", "Line item description", "Invoices", "XSRed shoes")
def XInvoiceCategory() -> QifCode: return QifCode("XN", "Line item category name", "Invoices", "XNSHOES")
def XInvoiceUnits() -> QifCode: return QifCode("X#", "Line item quantity", "Invoices", "X#1")
def XInvoicePricePerUnit() -> QifCode: return QifCode("X$", "Line item price per unit (multiply by X# for line item amount)", "Invoices", "X$150.00")
def XInvoiceTaxableFlag() -> QifCode: return QifCode("XF", "Line item taxable flag", "Invoices", "XFT")